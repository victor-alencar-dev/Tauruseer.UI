import { GridCellProps } from '@progress/kendo-react-grid';
import dayjs from 'dayjs';
import relativeTime from 'dayjs/plugin/relativeTime';
dayjs.extend(relativeTime);

const CustomNameCell = (props: GridCellProps) => {
  const { name } = props.dataItem;

  return (
    <td
      colSpan={props.colSpan}
      role={'gridcell'}
      key={props.id}
      aria-colindex={props.ariaColumnIndex}
      aria-selected={props.isSelected}
    >
      <p className="typography-body-1 mb-2" style={{ fontWeight: 'bold' }}>
        {name}
      </p>
    </td>
  );
};
const CustomDependencyCell = (props: GridCellProps) => {
  const { dependency, version } = props.dataItem;
  return (
    <td
      colSpan={props.colSpan}
      role={'gridcell'}
      key={props.id}
      aria-colindex={props.ariaColumnIndex}
      aria-selected={props.isSelected}
    >
      <p className="ff-montserrat mb-2 text-md">
        {props.dataItem[`${props.field}`]}{' '}
        {props.dataItem[`${props.field}`] === dependency ? version : ''}
      </p>
    </td>
  );
};
const CustomOwnerColumn = (props: GridCellProps) => {
  const { owner, ownerEmail } = props.dataItem;
  return (
    <td
      colSpan={props.colSpan}
      role={'gridcell'}
      key={props.id}
      aria-colindex={props.ariaColumnIndex}
      aria-selected={props.isSelected}
    >
      <div className="creator-name">{owner}</div>
      <div className="creator-identity">{ownerEmail}</div>
    </td>
  );
};

const DetectedOnCell = (props: GridCellProps) => {
  const { lastDetected } = props.dataItem;
  return (
    <td
      colSpan={props.colSpan}
      role={'gridcell'}
      key={props.id}
      aria-colindex={props.ariaColumnIndex}
      aria-selected={props.isSelected}
    >
      <div className="typography-body1 text-md font-regular mb-1">
        {dayjs(lastDetected).format('DD/MM/YYYY')}
      </div>
      <div className="typography-body1 text-md font-light text-muted">
        {dayjs(lastDetected).fromNow()}
      </div>
    </td>
  );
};

export const CustomCellCollection = [
  {
    name: 'CustomNameCell',
    Element: CustomNameCell,
  },
  {
    name: 'DetectedOnCell',
    Element: DetectedOnCell,
  },
  {
    name: 'CustomDependencyCell',
    Element: CustomDependencyCell,
  },
  {
    name: 'CustomOwnerColumn',
    Element: CustomOwnerColumn,
  },
];
