import { DEVICES, getActualDeviceRes } from '@tauruseer/core';
import {
  IExploitabilityMetrics,
  IImpactMetrics,
  IVulnerabilityVCSS,
  VulnerabilityVCSSLayout,
} from '@tauruseer/module';

export interface IVulnerabilityReportCardProps {
  cvssReport: IVulnerabilityVCSS;
}
export interface ICVSSDetailCardProps {
  titleInfoCard: string;
  detailValue: string;
}
export const CVSSDetailInfoCard = ({ titleInfoCard, detailValue }: ICVSSDetailCardProps) => {
  return (
    <div className="mb-3 detailCvssCard">
      <div className="typography-body2 text-md mb-2">{titleInfoCard}</div>
      <div className="typography-body1 font-medium text-sm mb-1 capitalize-first">
        <span className={`me-2`} style={{ opacity: '0.5' }}>
          {detailValue}
        </span>
      </div>
    </div>
  );
};

export const VulnerabilityCVSSReport = ({ cvssReport }: IVulnerabilityReportCardProps) => {
  const device = getActualDeviceRes();
  const isLaptop = device === DEVICES.LAPTOP;
  const paddingSize = isLaptop ? 'ps-4' : 'ps-5';
  const scoreSize = isLaptop ? 'col-3' : 'col-2';
  const metricsSize = isLaptop ? 'col-4' : 'col-5';
  const { baseScore, baseSeverity, version } = cvssReport;
  const exploitabilityMetrics: IExploitabilityMetrics = {
    accessVector: cvssReport.accessVector,
    accessComplexity: cvssReport.accessComplexity,
    authentication: cvssReport.authentication,
    attackVector: cvssReport.attackVector,
    attackComplexity: cvssReport.attackComplexity,
    privilegesRequired: cvssReport.privilegesRequired,
    userInteraction: cvssReport.userInteraction,
    scope: cvssReport.scope,
  };
  const impactMetrics: IImpactMetrics = {
    confidentiallyImpact: cvssReport.confidentialityImpact,
    integrityImpact: cvssReport.integrityImpact,
    availabilityImpact: cvssReport.availabilityImpact,
  };
  const { exploitabilityMetricsLayoutV2, exploitabilityMetricsLayoutV3, impactMetricsLayout } =
    VulnerabilityVCSSLayout;
  const cvssActive =
    cvssReport.version === '2.0' ? exploitabilityMetricsLayoutV2 : exploitabilityMetricsLayoutV3;
  const scoreColorStatus = (severity: string) => {
    let color;
    if (severity === 'CRITICAL') color = '#DB4A4A';
    if (severity === 'HIGH' && version === '2.0') color = '#DB4A4A';
    if (severity === 'HIGH' && (version === '3.1' || version === '3.0')) color = '#FF8A00';
    if (severity === 'MEDIUM') color = '#F1B604';
    if (severity === 'LOW') color = '#2BC977';
    return color;
  };
  return (
    <div className={`d-flex pt-4`}>
      <div className={`ps-0`}>
        <div
          className="border d-flex align-items-center flex-column justify-content-between p-3 rounded"
          style={{ minWidth: '100px' }}
        >
          <div
            className=" font-bolder"
            style={{ fontSize: '40px', color: scoreColorStatus(baseSeverity) }}
          >
            {baseScore}
          </div>
          <span className="text-md text-muted">Score</span>
        </div>
      </div>

      <div className={`${metricsSize} ps-5`}>
        <div className="mb-3">
          <span className="typography-body1 text-md font-bold" style={{ opacity: '0.5' }}>
            Exploitability Metrics
          </span>
        </div>
        {cvssActive.map((v, i) => {
          const value = exploitabilityMetrics[v.ref as keyof IExploitabilityMetrics];
          return <CVSSDetailInfoCard key={i} titleInfoCard={v.title} detailValue={value} />;
        })}
      </div>

      <div className={`${metricsSize}`}>
        <div className="mb-3">
          <span className="typography-body1 text-md font-bold" style={{ opacity: '0.5' }}>
            Impact Metrics
          </span>
        </div>
        {impactMetricsLayout.map((v, i) => {
          const value = impactMetrics[v.ref as keyof IImpactMetrics];
          return <CVSSDetailInfoCard key={i} titleInfoCard={v.title} detailValue={value} />;
        })}
      </div>
    </div>
  );
};

export default VulnerabilityCVSSReport;
