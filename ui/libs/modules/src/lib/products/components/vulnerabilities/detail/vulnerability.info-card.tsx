import { Button } from '@progress/kendo-react-buttons';
import { DEVICES, ModalForm, getActualDeviceRes } from '@tauruseer/core';
import { IVulnerability, IVulnerabilityVCSS } from '@tauruseer/module';
import classNames from 'classnames';
import React, { ReactElement, useEffect } from 'react';
import VulnerabilityCVSSReport from './vulnerability-cvss-report';
import { Link } from '@remix-run/react';
import { Tooltip } from '@progress/kendo-react-tooltip';

import { useFetcher } from '@remix-run/react';
import { Loader } from '@progress/kendo-react-indicators';

const ACCEPT_RISK_INTENT = 'acceptRisk';
export interface IVulnerabilityInfoCardProps {
  vulnerability: IVulnerability;
  productId?: string;
  hasAction: boolean;
}
export interface ICVSSTab {
  title: string;
  onclick: React.EventHandler<any>;
  version: string;
  isActive: boolean;
}

export const CVSSTabContainer = ({ title, onclick, version, isActive }: ICVSSTab): ReactElement => {
  const tabClass = classNames('cvssTabs', { isTabCvssActive: isActive });
  return (
    <div className={tabClass} onClick={() => onclick(version)}>
      {title}
    </div>
  );
};

export const CVSSEmptyState = () => {
  return (
    <div className="cvss-empty">
      <div className="cvs-empty-content">
        <span className="k-icon k-i-align-bottom-element"></span>
        <p className="ff-montserrat text-ml font-bold">No CVSS report available</p>
      </div>
    </div>
  );
};
export const VulnerabilityInfoCard = ({
  vulnerability,
  hasAction,
  productId,
}: IVulnerabilityInfoCardProps) => {
  const device = getActualDeviceRes();
  const isLaptop = device === DEVICES.LAPTOP;
  const col = isLaptop ? 'col-xxl-4' : 'col-xxl-3';
  const { vulnerabilityCvss, vulnerabilityDescription, vulnerabilityId, nistURL, mitreUrl } =
    vulnerability;
  const defaultCVSS = vulnerabilityCvss[0];
  const vulnerabilityDetailsFetch = useFetcher();
  const [activeTab, setActiveTab] = React.useState<string>(defaultCVSS?.version);
  const [activeCVSS, setActiveCVSS] = React.useState<IVulnerabilityVCSS>(defaultCVSS);
  const [showConfirmationModal, setShowConfirmationModal] = React.useState<boolean>(false);

  const handleSelect = (version: string) => {
    const cvss = vulnerabilityCvss.filter((v) => v?.version === version).pop();
    setActiveCVSS(cvss);
    setActiveTab(version);
  };

  const isLoading = vulnerabilityDetailsFetch.state !== 'idle' ? true : false;

  const [hasSubmitted, setHasSubmitted] = React.useState<boolean>(false);
  const acceptRiskHandler = async () => {
    if (!isLoading) {
      setHasSubmitted(true);
      vulnerabilityDetailsFetch.submit(
        // Intent is checked in the page actions
        {
          intent: ACCEPT_RISK_INTENT,
        },
        { method: 'post' },
      );
    }
  };

  useEffect(() => {
    if (hasSubmitted && !isLoading) {
      setShowConfirmationModal(false);
      setHasSubmitted(false);
    }
  }, [isLoading, hasSubmitted]);

  return (
    <div className="card card-content">
      <div className="d-flex justify-content-between align-items-center mb-4">
        <div>
          <div className="typography-h1 text-xl">{vulnerabilityId}</div>
          <div className="typography-h2 text-muted font-bold">Vulnerability Info Card</div>
          <div className="typography-h2">
            <a href={mitreUrl} target="_blank" rel="noreferrer">
              CVE,
            </a>{' '}
            <a href={nistURL} target="_blank" rel="noreferrer" className="ms-1">
              NVD
            </a>{' '}
          </div>
        </div>
        {hasAction && (
          <div className="d-flex flex-row align-items-center gap-2">
            <Link to={`/products/${productId}/track-item?cve=${vulnerabilityId}`}>
              <Button style={{ width: '150px' }} className="button button-secondary">
                Create work item
              </Button>
            </Link>
            <Button
              style={{ width: '150px' }}
              className="button button-secondary"
              onClick={() => setShowConfirmationModal(true)}
            >
              Accept Risk
            </Button>
          </div>
        )}
      </div>
      <div className="mb-4 row">
        <div className="d-flex justify-content-between">
          <div className="d-flex flex-column justify-content-start">
            <div className="typography-body2 text-md mb-1">Source</div>
            <Tooltip anchorElement="target" position="top">
              <span title={'Star Left Security'}>
                <i className="ts-brands ts-tauruseer" style={{ fontSize: '38px' }} />
              </span>
            </Tooltip>
          </div>
          <div className="col-10 ">
            <div className="typography-body2 text-md mb-1">Description</div>
            <textarea
              disabled
              className="typography-body1 text-md w-100 border border-0"
              style={{ height: '70px', resize: 'none', background: 'white' }}
            >
              {vulnerabilityDescription}
            </textarea>
          </div>
        </div>
      </div>
      <div className="container m-0 p-0">
        <div className="row">
          <div className={`col ${col}`}>
            <div className="typography-h1 text-xl">CVSS Reports</div>
          </div>
          {vulnerabilityCvss.map((item, index) => {
            return (
              <CVSSTabContainer
                title={`CVSS v${item.version}`}
                key={index}
                onclick={handleSelect}
                version={item.version}
                isActive={activeTab === item.version}
              />
            );
          })}
          {vulnerabilityCvss.length ? (
            <VulnerabilityCVSSReport cvssReport={activeCVSS} />
          ) : (
            <CVSSEmptyState />
          )}
        </div>
      </div>
      {showConfirmationModal && (
        <ModalForm
          type="dialog"
          onClose={() => setShowConfirmationModal(false)}
          width={362}
          title={''}
        >
          <div className="d-flex flex-column justify-center align-items-center gap-5">
            <h2 className="ff-ubuntu text-xl text-center" style={{ width: 220 }}>
              Are you sure you want to accept this risk?
            </h2>
            <div className="d-flex flex-row gap-2 justify-center align-items-center">
              {isLoading ? (
                <Loader size="medium" type="infinite-spinner" />
              ) : (
                <>
                  <Button
                    style={{ width: '150px' }}
                    disabled={isLoading || hasSubmitted}
                    className="button button-secondary"
                    themeColor={'light'}
                    fillMode="solid"
                    rounded="medium"
                    onClick={() => setShowConfirmationModal(false)}
                  >
                    Cancel
                  </Button>
                  <Button
                    disabled={isLoading || hasSubmitted}
                    style={{ width: '150px' }}
                    className="button button-primary"
                    onClick={() => acceptRiskHandler()}
                  >
                    Yes
                  </Button>
                </>
              )}
            </div>
          </div>
        </ModalForm>
      )}
    </div>
  );
};

export default VulnerabilityInfoCard;
