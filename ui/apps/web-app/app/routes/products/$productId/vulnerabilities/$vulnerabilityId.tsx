import { ActionFunction, LoaderFunction } from '@remix-run/node';
import {
  getProductsDetail,
  getVulnerabilitiesAIRemediation,
  tokenInterceptor,
  acceptRiskOnVulnerability,
  getVulnerabilitiesDetailOfProduct,
} from '@tauruseer/api';
import { Error } from '@tauruseer/core';
import { IProducts, VulnerabilityDetails } from '@tauruseer/module';
import { LinkCommonProductStyles, LinkVulnerabilityRemediation } from '@tauruseer/ui';
import { useLoaderData } from 'react-router';
import { checkAuth } from '../../../../auth/auth.service.server';

export const links = () => [...LinkVulnerabilityRemediation, ...LinkCommonProductStyles];

const ACCEPT_RISK_INTENT = 'acceptRisk';

export const action: ActionFunction = async ({ request, params }) => {
  const { productId, vulnerabilityId } = params;
  const formData = await request.formData();
  // Depending on the intent value, we either redirect to the data source authentication page, or we add or remove a repository from the data source.
  const intent = formData.get('intent');
  const instanceId = String(formData.get('instanceId'));
  const token = await checkAuth(request);
  tokenInterceptor(token);

  switch (intent) {
    case ACCEPT_RISK_INTENT: {
      // Accepts risk for a vulnerability
      const res =
        productId && vulnerabilityId
          ? await acceptRiskOnVulnerability(JSON.parse(instanceId), productId)
          : null;
      return res;
    }

    default:
      console.log('No intent found');
      return null;
  }
};

export const loader: LoaderFunction = async ({ request, params }) => {
  const { productId, vulnerabilityId } = params;
  const token = await checkAuth(request);
  tokenInterceptor(token);
  const { data: product } = await getProductsDetail(productId as string);
  const vulnerability = await getVulnerabilitiesDetailOfProduct(
    String(productId),
    `${vulnerabilityId}`,
  );
  const aiRemediation = vulnerabilityId
    ? await getVulnerabilitiesAIRemediation(vulnerabilityId, 'Dependency', true, 'javascript')
    : null;
  return { product, vulnerability, productId, aiRemediation };
};

export default function VulnerabilitiesPage() {
  const { product, vulnerability, productId, aiRemediation }: any = useLoaderData();

  return (
    <VulnerabilityDetails
      product={product as IProducts}
      vulnerability={vulnerability}
      productId={productId}
      aiRemediation={aiRemediation ? aiRemediation[0] : undefined}
    />
  );
}

export function ErrorBoundary({ error }: { error: Error }) {
  return <Error error={error} />;
}
