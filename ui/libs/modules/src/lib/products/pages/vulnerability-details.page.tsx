import { ConfirmationModal, InfoCard, ModalForm, ProductDataGridPage } from '@tauruseer/core';

import {
  ACCEPT_RISK_INTENT,
  IProducts,
  IVulnerability,
  VulnerabilityRemediationAICard,
  vulnerabilityContent,
  vulnerabilityDetailsBreadcrumbData,
} from '@tauruseer/module';
import { useEffect, useState } from 'react';

import { useFetcher } from '@remix-run/react';
import { AcceptRiskModal } from '../components/common/modals/accept-risk-modal.component';

export interface IVulnerabilitiesProps {
  product: IProducts;
  vulnerability: IVulnerability;
  productId: string;
  aiRemediation?: {
    cve: string;
    remediationDescription: string;
    language: string;
  };
}

export const VulnerabilityDetails = ({
  product,
  productId,
  vulnerability,
  aiRemediation,
}: IVulnerabilitiesProps) => {
  const fetcher = useFetcher();
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [showConfirmationModal, setShowConfirmationModal] = useState<boolean>(false);
  const [showExpandModal, setShowExpandModal] = useState<boolean>(false);

  const [selectedInstanceId, setSelectedInstanceId] = useState<number[]>([]);

  const acceptRiskHandler = async () => {
    if (!isLoading) {
      setIsLoading(true);
      fetcher.submit(
        // Intent is checked in the page actions
        {
          intent: ACCEPT_RISK_INTENT,
          instanceId: JSON.stringify(selectedInstanceId),
        },
        { method: 'post' },
      );
    }
  };

  useEffect(() => {
    if (isLoading && fetcher.data) {
      setShowConfirmationModal(false);
      setIsLoading(false);
    }
  }, [isLoading, fetcher.data]);

  const content = vulnerabilityContent({
    productId,
    product,
    vulnerability,
    onExpandModal: () => setShowExpandModal(true),
    onAcceptRisk: (instanceId) => {
      setSelectedInstanceId([Number(instanceId)]);
      setShowConfirmationModal(true);
    },
    onAcceptMultipleRisks: (instanceIds) => {
      setSelectedInstanceId(instanceIds);
      setShowConfirmationModal(true);
    },
  });
  return (
    <ProductDataGridPage
      breadcrumbData={vulnerabilityDetailsBreadcrumbData(product, vulnerability)}
      product={product}
    >
      <div className="row">
        <div className="col-12">
          <InfoCard content={content}></InfoCard>
        </div>
      </div>
      {aiRemediation && (
        <div className="row">
          <div className="col-12">
            <VulnerabilityRemediationAICard
              markdown={aiRemediation.remediationDescription}
              loading={false}
              language={aiRemediation.language?.toLowerCase()}
            />
          </div>
        </div>
      )}
      {showConfirmationModal && (
        <AcceptRiskModal
          onClose={() => setShowConfirmationModal(false)}
          onConfirm={() => acceptRiskHandler()}
          isLoading={isLoading}
          multiple={selectedInstanceId.length > 1}
          data={
            content.table?.data.filter((item) =>
              selectedInstanceId.find((instanceId) => instanceId === item['id']),
            ) ?? []
          }
          fields={content.table?.confirmationFields ?? []}
        />
      )}
      {showExpandModal && content.textbox && (
        <ModalForm
          title={content.header.title}
          onClose={() => setShowExpandModal(false)}
          width={1000}
        >
          <div
            className="code-vulnerabilities-expand-modal"
            style={{ maxHeight: 'calc(100vh - 300px)', overflowY: 'auto' }}
          >
            {content.textbox.content}
          </div>
        </ModalForm>
      )}
    </ProductDataGridPage>
  );
};
